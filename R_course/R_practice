#R has three basic indexing operators, with syntax displayed by the following examples...
x[i]
x[i, j]
x[[i]]
x[[i, j]]
x$a
x$"a"
#Open parentheses () indicate the beginning of an argument list and the token to the left of the open-paren should be a function name. 
#If there is no token to the left of the open-paren it is an implicit call to eval. 

#How to get a subset of dataframe
#1. by omitting row and column references
>df[1:9,22:50] #row1-9 and column 22-50)
>df[c(2,4), c(1,3)] # row 2 and 4 in column 1 and 3

#2. by criteria 
>subset (df, colname > 12) #extract that rows in which the value in column is >12

>planets_df[,3]
>planets_df[,"diameter"]
>planets_df$diameter

#define subset
>subset(dataset, criteria)

#How to add a colum/row to a matrix
>cbind (matrix, c(1,2,3)) #adds columns with values 1,2,3 to end of matrix
>rbind (matrix, c(1,2,3)) #adds rows with values 1,2,3 to end of matrix

#factor = variables with limited number of different values (e.g. categorical data)
>data = c (1,2,3)
>fdata = factor(data)
>fdata 
[1] 1 2 3 
levels: 1 2 3 
#summary(factor) counts numbers for each factor value

# x$y $ referst to a specific column y in dataset x or specific vector in dataframe

# How to add row or columnames
> mat_c <- matrix (5:16, nrow = 3, byrow = TRUE)
> rownames(mat_c) <- c("q", "p", "r")
#generally add names to lists
>names(list) <-c("1")

#see only head of dataset
>head(dataset)

#structure of dataset
>str(dataset)

#create dataframe of different vectors name, type, diameter, rotation, and rings
>planets_df <- data.frame(name, type, diameter, rotation, rings)

#sorting
# Use order() to create positions
positions <- order(planets_df$diameter)
# Use positions to sort planets_df$diameter
planets_df [positions, ]

#Logic operators
#& AND operator p value & logFC
#| OR operator +logFC |-logFC
#! NOT operator !TRUE = FALSE
#double && investigates only result on the first element

#sum
>sum(dataset, condition)

#loops
primes_list <- list(2, 3, 5, 7, 11, 13)

# loop version 1
for (p in primes_list) {
  print(p)
}

# loop version 2
for (i in 1:length(primes_list)) {
  print(primes_list[[i]])
}
